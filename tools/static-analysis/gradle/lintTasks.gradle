ext.generateLintBaseline = { baselinePath, configPath ->

    def taskLists = []
    subprojects.each { project ->
        project.getAllTasks(false).entrySet().each {
            def task = it.value.findAll { it.name.contains("lint") && it.name.contains("Debug") }
            taskLists.addAll(task)
        }
    }
    def runLintModuleOnlyArg = rootProject.hasProperty("runLintModuleOnly") ?
            rootProject.getProperties().get("runLintModuleOnly") : null

    if (baselinePath == null || baselinePath.isEmpty()) {
        throw new IllegalArgumentException("lintBaselinePath must not be null for generateLintBaseline task")
    }

    def config = (configPath == null || configPath.isEmpty()) ?
            "${rootDir}/android-style-guide/tools/static-analysis/lint/lint.xml" :
            configPath

    delete fileTree(dir: baselinePath)

    taskLists.each { task ->
        def lintOptions = task.project.getProperty("android").getProperty("lintOptions")
        lintOptions.setProperty("abortOnError", false)
        lintOptions.setProperty("checkAllWarnings", true)
        lintOptions.setProperty("warningsAsErrors", true)
        lintOptions.setProperty("htmlReport", false)
        lintOptions.setProperty("xmlReport", true)
        lintOptions.setProperty("xmlOutput", file("${project.buildDir}/reports/lint/${task.project.name}-${task.name}.xml"))
        lintOptions.setProperty("lintConfig", file(config))
        lintOptions.setProperty("baselineFile",
                file("${baselinePath}/${task.project.name}-${task.name}.xml"))
    }
    if (runLintModuleOnlyArg != null) {
        taskLists = taskLists.find { task ->
            task.project.name == runLintModuleOnlyArg
        }
    }
    return taskLists
}
