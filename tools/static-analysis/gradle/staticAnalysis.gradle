def getAndroidProjectSources

apply from: "${rootDir}/android-style-guide/tools/static-analysis/gradle/commonHttpStaticAnalysis.gradle"

repositories {
    maven { url "http://dl.bintray.com/touchin/touchin-tools" }
    jcenter()
}

dependencies {
    pmd 'net.sourceforge.pmd:pmd-core:5.5.3'
    pmd 'net.sourceforge.pmd:pmd-java:5.5.3'

    checkstyle 'ru.touchin:checkstyle:7.6.2-fork'

//    cpd 'de.aaschmid:gradle-cpd-plugin:1.0'

    detekt 'io.gitlab.arturbosch.detekt:detekt-cli:1.0.0.RC7'
}

gradle.projectsEvaluated {

    tasks.withType(JavaCompile) {
        options.compilerArgs <<
                "-Xlint:cast" <<
                "-Xlint:divzero" <<
                "-Xlint:empty" <<
                "-Xlint:deprecation" <<
                "-Xlint:finally" <<
                "-Xlint:overrides" <<
                "-Xlint:path" <<
                "-Werror"
    }

    def excludes = rootProject.extensions.findByName("pathExludes")
    def analysatorParameters = rootProject.hasProperty("anlysators") ? rootProject.ext.anlysators : null
    def excludesAnalysers = analysatorParameters ? analysatorParameters["staticAnalysisExcludes"] : []

    def androidStaticAnalysisTasks = getStaticAnalysisTaskNames(true, analysatorParameters, getAndroidProjectSources(excludes))
    def androidIdeaFormatTask = getIdeaFormatTask(true, getAndroidProjectSources(excludes))
    task staticAnalysis {
        group = 'headhunter'

        androidStaticAnalysisTasks.each { task ->
            task.mustRunAfter(androidIdeaFormatTask)
        }
        dependsOn androidIdeaFormatTask
        dependsOn androidStaticAnalysisTasks
        doFirst {
            generateHtmlReport(true, excludesAnalysers)
        }
    }

    task checkMyScript {
    }

    task staticAnalysisWithoutFormatting {
        group = 'headhunter'

        dependsOn androidStaticAnalysisTasks
        doFirst {
            generateHtmlReport(true, excludesAnalysers)
        }
    }

}

getAndroidProjectSources = { excludes ->
    def sources = new ArrayList<String>()
    for (def project : rootProject.subprojects) {
        if (!project.subprojects.isEmpty() || (excludes != null && excludes.contains(project.path))) {
            continue
        }

        def sourcesDirectory = new File(project.projectDir.path, 'src')
        if (!sourcesDirectory.exists() || !sourcesDirectory.isDirectory()) {
            continue
        }

        for (def sourceFlavorDirectory : sourcesDirectory.listFiles()) {
            def javaSourceDirectory = new File(sourceFlavorDirectory.path, 'java')
            def kotlinSourceDirectory = new File(sourceFlavorDirectory.path, 'kotlin')

            if (javaSourceDirectory.exists() && javaSourceDirectory.isDirectory()) {
                sources.add(javaSourceDirectory.absolutePath)
            }
            if (kotlinSourceDirectory.exists() && kotlinSourceDirectory.isDirectory()) {
                sources.add(kotlinSourceDirectory.absolutePath)
            }
        }
    }
    return sources
}


