def getServerProjectSources
def getAndroidProjectSources

apply from: "${rootDir}/android-style-guide/tools/static-analysis/gradle/commonHttpStaticAnalysis.gradle"

repositories {
    maven { url "http://dl.bintray.com/touchin/touchin-tools" }
    jcenter()
}

dependencies {
    pmd 'net.sourceforge.pmd:pmd-core:5.5.3'
    pmd 'net.sourceforge.pmd:pmd-java:5.5.3'

    checkstyle 'ru.touchin:checkstyle:7.6.2-fork'

//    cpd 'de.aaschmid:gradle-cpd-plugin:1.0'

    detekt 'io.gitlab.arturbosch.detekt:detekt-cli:1.0.0.RC7'
}

gradle.projectsEvaluated {

    tasks.withType(JavaCompile) {
        options.compilerArgs <<
                "-Xlint:cast" <<
                "-Xlint:divzero" <<
                "-Xlint:empty" <<
                "-Xlint:deprecation" <<
                "-Xlint:finally" <<
                "-Xlint:overrides" <<
                "-Xlint:path" <<
                "-Werror"
    }

    def excludesAnalysers = rootProject.hasProperty("staticAnalysisExcludes") ? rootProject.ext.staticAnalysisExcludes : []
    def excludes = rootProject.extensions.findByName("pathExludes")

    def androidStaticAnalysisTasks = getStaticAnalysisTaskNames(true, excludesAnalysers, getAndroidProjectSources(excludes))
    def androidIdeaFormatTask = getIdeaFormatTask(true, getAndroidProjectSources(excludes))
    task staticAnalysis {
        group = 'headhunter'

        androidStaticAnalysisTasks.each { task ->
            tasks.findByName(task).mustRunAfter(androidIdeaFormatTask)
        }
        dependsOn androidIdeaFormatTask
        dependsOn androidStaticAnalysisTasks
        doFirst {
            generateHtmlReport(true, excludesAnalysers)
        }
    }

    task checkMyScript {
        println("ALL EXCLUSED: ${excludesAnalysers.toString()}")
    }

    task staticAnalysisWithoutFormatting {
        group = 'headhunter'

        dependsOn androidStaticAnalysisTasks
        doFirst {
            generateHtmlReport(true, excludesAnalysers)
        }
    }

    def serverStaticAnalysisTasks = getStaticAnalysisTaskNames(true, excludesAnalysers, getAndroidProjectSources(excludes))
    def serverIdeaFormatTask = getIdeaFormatTask(false, getServerProjectSources(excludes))
    task serverStaticAnalysis {
        group = 'headhunter'

        serverStaticAnalysisTasks.each { task ->
            tasks.findByName(task).mustRunAfter(serverIdeaFormatTask)
        }
        dependsOn serverIdeaFormatTask
        dependsOn serverStaticAnalysisTasks
        doFirst {
            generateHtmlReport(false, excludesAnalysers)
        }
    }

    task serverStaticAnalysisWithoutFormatting {
        group = 'headhunter'

        dependsOn serverStaticAnalysisTasks
        doFirst {
            generateHtmlReport(false)
        }
    }
}

getServerProjectSources = { excludes ->
    def sources = new ArrayList<String>()
    def sourcesDirectory = new File(project.projectDir.path, 'src')

    for (def sourceFlavorDirectory : sourcesDirectory.listFiles()) {
        def javaSourceDirectory = new File(sourceFlavorDirectory.path, 'java')
        def kotlinSourceDirectory = new File(sourceFlavorDirectory.path, 'kotlin')

        if (javaSourceDirectory.exists() && javaSourceDirectory.isDirectory()) {
            sources.add(javaSourceDirectory.absolutePath)
        }
        if (kotlinSourceDirectory.exists() && kotlinSourceDirectory.isDirectory()) {
            sources.add(kotlinSourceDirectory.absolutePath)
        }
    }
    return sources
}

getAndroidProjectSources = { excludes ->
    def sources = new ArrayList<String>()
    for (def project : rootProject.subprojects) {
        if (!project.subprojects.isEmpty() || (excludes != null && excludes.contains(project.path))) {
            continue
        }

        def sourcesDirectory = new File(project.projectDir.path, 'src')
        if (!sourcesDirectory.exists() || !sourcesDirectory.isDirectory()) {
            continue
        }

        for (def sourceFlavorDirectory : sourcesDirectory.listFiles()) {
            def javaSourceDirectory = new File(sourceFlavorDirectory.path, 'java')
            def kotlinSourceDirectory = new File(sourceFlavorDirectory.path, 'kotlin')

            if (javaSourceDirectory.exists() && javaSourceDirectory.isDirectory()) {
                sources.add(javaSourceDirectory.absolutePath)
            }
            if (kotlinSourceDirectory.exists() && kotlinSourceDirectory.isDirectory()) {
                sources.add(kotlinSourceDirectory.absolutePath)
            }
        }
    }
    return sources
}


